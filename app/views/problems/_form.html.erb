<% if @problem.persisted? %>
  <% set_page_title "Edit " + @problem.id.to_s + " - " + @problem.name %>
<% else %>
  <% set_page_title "New problem" %>
<% end %>

<%= nested_form_for @problem, :html => {:class => 'form', :id => 'problem-form'} do |f| %>
  <% if @problem.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@problem.errors.count, "error") %> prohibited this problem from being saved:</h2>
      <ul>
        <% @problem.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-12">
      <div class="form-group">
        <%= f.label :name %>
        <%= f.text_field :name, :class => 'form-control flat' %>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-3">
      <div class="form-group">
        <%= f.label :tag_list, "Tags" %>
        <%= f.text_field :tag_list, value: @problem.tag_list.to_s,:class => 'tagsinput ', :id => 'tagsinput' %>
        <script>
          $('.tagsinput').tagsInput();
        </script>
      </div>
    </div>
    <div class="col-md-3">
      <div class="form-group">
        <%= f.label :visible_state %>
        <%= f.select :visible_state, Problem.visible_states.keys.map.with_index {|x, index| ["[#{index}] #{visible_state_desc_map[x].capitalize}", x]},
          {}, {:class => 'form-control flat'} %>
      </div>
    </div>
    <div class="col-md-3">
      <div class="form-group">
        <%= f.label :specjudge_type, "Judge Type" %>
        <%= f.select :specjudge_type, Problem.specjudge_types.keys.map.with_index {|x, index| ["[#{index}] #{specjudge_type_desc_map[x]}", x]},
          {}, {:class => 'form-control flat'} %>
      </div>
    </div>
    <div class="col-md-3">
      <div class="form-group">
        <%= f.label :interlib_type, "Interactive Library Type" %>
        <%= f.select :interlib_type, Problem.interlib_types.keys.map.with_index {|x, index| ["[#{index}] #{interlib_type_desc_map[x]}", x]},
          {}, {:class => 'form-control flat'} %>
      </div>
    </div>
  </div>

  <div class="form-group">
    <%= f.label :description %>
        <%= f.text_area :description, :class => 'form-control flat', :rows => '9' %>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="form-group">
        <%= f.label :input, "Input Format" %>
        <%= f.text_area :input, :class => 'form-control flat', :rows => '7' %>
      </div>
    </div>
    <div class="col-md-6">
      <div class="form-group">
        <%= f.label :output, "Output Format" %>
        <%= f.text_area :output, :class => 'form-control flat', :rows => '7' %>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="form-group">
        <%= f.label :example_input, "Sample Input" %>
        <%= f.text_area :example_input, :class => 'form-control flat code-input', :rows => '7' %>
      </div>
    </div>
    <div class="col-md-6">
      <div class="form-group">
        <%= f.label :example_output, "Sample Output" %>
        <%= f.text_area :example_output, :class => 'form-control flat code-input', :rows => '7' %>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <div class="form-group">
        <%= f.label :hint, "Hints" %>
        <%= f.text_area :hint, :class => 'form-control flat', :rows => '3' %>
      </div>
    </div>
    <div class="col-md-6">
      <div class="form-group">
        <%= f.label :source, "Problem Source" %>
        <%= f.text_area :source, :class => 'form-control flat', :rows => '3' %>
      </div>
    </div>
  </div>

  <div class="form-group">
    <%= f.label :discussion_visibility %>
    <%= f.select :discussion_visibility, Problem.discussion_visibilities.keys.map.with_index {|x, index| ["[#{index}] #{discussion_visibility_desc_map[x]}", x]},
      {}, {:class => 'form-control flat'} %>
  </div>

  <div class="form-group">
    <%= f.label :score_precision %>
    <%= f.number_field :score_precision, :in => 0..6, :class => 'form-control flat', :required => true %>
  </div>

  <div class="form-group">
    <%= f.label :compilers do %>
      Banned compilers
      <br>
      <% Compiler.order(order: :asc).all.each do |c| %>
        <span class="button-checkbox">
          <%= button_tag c.name, type: "button", class: "btn", "data-color": "danger" %>
          <%= check_box_tag "problem[compiler_ids][]", c.id, @ban_compiler_ids.include?(c.id), hidden: true %> 
        </span>
      <% end %>
    <% end %>
  </div>

  <% if @problem.specjudge_type and not @problem.specjudge_none? %>
    <div class="form-group">
      <%= f.label :specjudge_compiler_id, "Special Judge Compiler" %>
      <%= f.select :specjudge_compiler_id, options_for_select(@compiler.map{|x| [x.description, x.id]}, @problem.specjudge_compiler_id || @compiler[0].id),
          {}, {:class => 'form-control flat'} %>
    </div>
    <div class="form-group">
      <%= f.label :sjcode, raw('Special Judge Code <a class="glyphicon glyphicon-question-sign" style="color: inherit;" data-toggle="collapse" href="#sjDescription" role="button" aria-expanded="false" aria-controls="collapseExample"></a></label>') %>
      <div class="collapse" id="sjDescription" style="height: auto;">
        <div class="panel panel-default">
          <div class="panel-body small">
            <% if @problem.specjudge_old? %>
              Output <code>0</code> to stdout for AC, WA otherwise. This program will only be called when the user program terminated normally.<br>
              <div style="line-height: 1.3;">
                <code>argv[1]</code>: path to testee output<br>
                <code>argv[2]</code>: path to testdata input<br>
                <code>argv[3]</code>: path to testdata output<br>
                <code>argv[4]</code>: language (c++98/c++11/c++14/c++17/c90/c99/c11/haskell/python2/python3)<br>
                <code>argv[5]</code>: path to source code
              </div>
            <% elsif @problem.specjudge_new? %>
              This program will be called even if the user program didn't terminate normally (e.g. <span class="text-info">TLE</span>, <span class="text-sig">SIG</span>).<br>
              The program will be provided a metadata file; the path is in <code>argv[1]</code>. It is a JSON file with the following fields:
              <pre class="pre-scrollable" style="max-height: 200px; line-height: 1.2;"><%= JSON.pretty_generate({
                input_file: 'path_to_testdata_input',
                answer_file: 'path_to_testdata_answer',
                user_output_file: 'path_to_user_output',
                user_code_file: 'path_to_user_source_code',
                problem_id: 1234,
                submission_id: 123456,
                contest_id: -1,
                submitter_id: 123,
                submitter_name: 'username',
                submitter_nickname: 'nickname',
                submission_time: 1656430000,
                compiler: 'c++14/python2/etc.',
                testdata_index: 0,
                limits: {
                  time_us: 1000000,
                  vss_kb: 262144,
                  rss_kb: 0,
                  output_kb: 262144,
                },
                stats: {
                  original_verdict: 'TLE',
                  exit_code: 0,
                  real_us: 512345,
                  user_us: 412345,
                  sys_us: 98765,
                  max_vss_kb: 80004,
                  max_rss_kb: 68488,
                },
              }) %></pre>
              Note: <code>original_verdict</code> will be an empty string if the program terminated normally.<br>
              The program must output a JSON object to stdout with the following fields:
              <pre style="line-height: 1.2;"><%= JSON.pretty_generate({
                verdict: 'AC',
                score: '1.35',
                time_us: 123456,
                vss_kib: 66888,
                rss_kib: 44888,
              }) %></pre>
              Note: <code>score</code> can be given by float or string. All fields other than <code>verdict</code> are optional.<br>
            <% end %>
            <code>#include "testlib.h"</code> (<a href="https://github.com/MikeMirzayanov/testlib/tree/6daa79fdc9c2b113be8d40f828e3dc81e67ce33d">docs</a>) and <code>#include "nlohmann/json.hpp"</code> (<a href="https://github.com/nlohmann/json/tree/v3.10.5">docs</a>) are provided for C++ special judge programs. If you're using <code>testlib</code>, note that the <code>argv</code> format of TIOJ is different from that required by the library, thus some preprocessing is needed before calling <code>registerTestlibCmd</code>.
          </div>
        </div>
      </div>
      <%= f.text_area :sjcode, :class => 'form-control flat code-input', :rows => '7' %>
    </div>
  <% end %>

  <% if @problem.interlib_header? %>
    <div class="form-group">
      <%= f.label :interlib, raw('Interactive Library Header ( <code>#include "lib' + @problem.id.to_s.rjust(4, '0') + '.h"</code> )') %>
      <%= f.text_area :interlib, :class => 'form-control flat code-input', :rows => '7' %>
    </div>
    <div class="form-group">
      <%= f.label :interlib_impl, raw("Interactive Library Implementation (will be linked with user's program)") %>
      <%= f.text_area :interlib_impl, :class => 'form-control flat code-input', :rows => '7' %>
    </div>
  <% end %>

  <%= f.label nil, raw("Testdata Sets (testdata no. starts from 0, examples: <code>0</code>, <code>1-4</code>, <code>2,4,9-11,13-18</code>)") %><br>
  <%= f.fields_for :testdata_sets do |t| %>
    <div class="form-group">
      <div class="row">
        <div class="col-md-2">
          <%= t.label :td_list, "Testdata list:" %>
        </div>
        <div class="col-md-2">
          <%= t.text_field :td_list, :pattern => '\d+(-\d+)?(,\d+(-\d+)?)*', :class => 'form-control flat', :required => true %>
        </div>
        <div class="col-md-1">
          <%= t.label :td_list, "Constraints:" %>
        </div>
        <div class="col-md-3">
          <%= t.text_field :constraints, :class => 'form-control flat' %>
        </div>
        <div class="col-md-1">
          <%= t.label :score, "Score:" %>
        </div>
        <div class="col-md-1">
          <%= t.number_field :score, :in => 0..100000, :step => :any, :class => 'form-control flat', :required => true %>
        </div>
        <div class="col-md-1">
          <%= t.link_to_remove "Remove this range", :class => 'btn btn-danger' %>
        </div>
      </div>
    </div>
  <% end %>
  <%= f.link_to_add "Add a range", :testdata_sets, :class => 'btn btn-warning' %>

  <br><br>
  <div class="row">
    <div class="col-md-12">
      <div class="form-group">
        <%= f.label :verdict_ignore_td_list, "Testdata list to ignore in overall verdict calculation" %>
        <%= f.text_field :verdict_ignore_td_list, :class => 'form-control flat' %>
      </div>
    </div>
  </div>

  <hr>
  <div class="actions">
    <span class="flex-container-bottom-align">
      <%= f.submit :class => 'btn btn-success btn-lg', :id => 'submit-btn' %>
      <% if @isNewProblem == true %>
        &nbsp;
        <span class="fancy-checkbox">
          <input type="checkbox" id="disable-fool-proof" autocomplete="off" />
          <div class="btn-group">
            <label for="disable-fool-proof" class="btn btn-xs btn-default">
              <span class="glyphicon glyphicon-ok"></span>
              <span></span>
            </label>
            <label for="disable-fool-proof" class="btn btn-xs btn-default">
              Disable fool-proof of repeat submit
            </label>
          </div>
        </span>
      <% end %>
    </span>
  </div>
<% end %>

<style>
.flex-container-bottom-align {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: flex-end;
}
</style>

<script>
  $(document).on('nested:fieldRemoved',function(event){
    event.field.find("input").removeAttr("min max required");
  });
  button_checkbox_setup();
</script>

<% if @isNewProblem == true %>
  <script>
    const btn = document.getElementById('submit-btn')
    window.addEventListener('load', function () {
      btn.disabled = false
    });

    const form = document.getElementById('problem-form')
    form.addEventListener('submit', function () {
      const switc = document.getElementById('disable-fool-proof')
      // disable the submit button for 10 sec if `disable fool proof` button is not checked
      if (!switc.checked) {
        btn.disabled = true
        setTimeout(() => btn.disabled = false, 10000)
      }
    })
  </script>
<% end %>
